package garden.appl.mitch.files

import android.Manifest
import android.app.Activity
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Environment
import android.util.Log
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import garden.appl.mitch.FILE_PROVIDER
import garden.appl.mitch.Mitch
import garden.appl.mitch.PERMISSION_REQUEST_DOWNLOADS_VIEW_INTENT
import garden.appl.mitch.PERMISSION_REQUEST_MOVE_TO_DOWNLOADS
import garden.appl.mitch.Utils
import java.io.File

class ExternalFileManager {
    companion object {
        private val LOGGING_TAG = "ExternalFileManager"
    }

    private var lastUploadId: Int = 0
    private lateinit var moveToDownloadsCallback: (String?) -> Unit
    
    private lateinit var lastExternalFileName: String
    private lateinit var getViewIntentCallback: (Intent?) -> Unit

    /**
     * Move a completed download to downloads folder.
     * @param activity activity which might request permission (must implement [Activity.onRequestPermissionsResult]
     * @param uploadId downloaded file to move
     * @param callback function which receives the new file name: it should be usable with [getViewIntent]
     */
    fun moveToDownloads(activity: Activity, uploadId: Int, callback: (String?) -> Unit) {
        if (ContextCompat.checkSelfPermission(activity, Manifest.permission.WRITE_EXTERNAL_STORAGE) ==
                PackageManager.PERMISSION_GRANTED) {
            doMoveToDownloads(uploadId, callback)
            return
        }

        lastUploadId = uploadId
        moveToDownloadsCallback = callback
        ActivityCompat.requestPermissions(activity, arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE),
            PERMISSION_REQUEST_MOVE_TO_DOWNLOADS)
    }
    
    fun resumeMoveToDownloads() {
        doMoveToDownloads(lastUploadId, moveToDownloadsCallback)
    }
    
    private fun doMoveToDownloads(uploadId: Int, callback: (String?) -> Unit) {
        val file = Mitch.fileManager.getDownloadedFile(uploadId)
        if (file?.exists() != true) {
            callback(null)
            return
        }
        val downloadsDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)
        var attemptBaseName = file.nameWithoutExtension
        val extension = file.extension

        var i = 0
        while (true) {
            try {
                var newFile = File(downloadsDir, "$attemptBaseName.$extension")
                if (!file.renameTo(newFile)) {
                    newFile = file.copyTo(newFile)
                    file.delete()
                }
                callback(newFile.name)
                return
            } catch (e: FileAlreadyExistsException) {
                i++
                attemptBaseName = "${file.nameWithoutExtension}-$i"
            }
        }
    }

    /**
     * Get intent for viewing an externally saved file
     * @param activity activity which might request permission (must implement [Activity.onRequestPermissionsResult]
     * @param externalFileName external file name generated by [moveToDownloads]
     * @param callback function which receives the intent. Receives null if file no longer exists
     */
    fun getViewIntent(activity: Activity, externalFileName: String, callback: (Intent?) -> Unit) {
        Log.d(LOGGING_TAG, "Opening $externalFileName")

        if (ContextCompat.checkSelfPermission(activity, Manifest.permission.WRITE_EXTERNAL_STORAGE) ==
                PackageManager.PERMISSION_GRANTED) {
            doGetViewIntent(activity, externalFileName, callback)
            return
        }

        lastExternalFileName = externalFileName
        getViewIntentCallback = callback
        ActivityCompat.requestPermissions(activity, arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE),
            PERMISSION_REQUEST_DOWNLOADS_VIEW_INTENT)
    }
    
    fun resumeGetViewIntent(context: Context) {
        doGetViewIntent(context, lastExternalFileName, getViewIntentCallback)
    }
    
    private fun doGetViewIntent(context: Context, externalFileName: String, callback: (Intent?) -> Unit) {
        val downloadsDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)
        val file = File(downloadsDir, externalFileName)
        if (file.exists())
            callback(Utils.getIntentForFile(context, file, FILE_PROVIDER))
        else
            callback(null)
    }
}